#!/usr/bin/python
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: op-test-framework/ci/source/op_ci_bmc.py $
#
# OpenPOWER Automated Test Project
#
# Contributors Listed Below - COPYRIGHT 2015-2017
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG
"""
op-test: run OpenPOWER test suite(s)
"""
import sys
import os
import unittest
import xmlrunner

import OpTestConfiguration
from testcases import OpTestPCI
from testcases import OpTestFWTS
from testcases import BasicIPL
from testcases import OpTestDropbearSafety
from testcases import OpTestRTCdriver
from testcases import OpTestEM
from testcases import OpTestAt24driver
from testcases import OpTestEEH
from testcases import OpTestEnergyScale
from testcases import OpTestFastReboot
from testcases import OpTestHMIHandling
import testcases

args, remaining_args = OpTestConfiguration.conf.parse_args(sys.argv)
OpTestConfiguration.conf.objs()

print args

class StandbySuite():
    def __init__(self):
        self.s = unittest.TestSuite()
#        self.s.addTest(OpTestEnergyScale.standby_suite())
    def suite(self):
        return self.s

class SkirootSuite():
    def __init__(self):
        self.s = unittest.TestSuite()
        self.s.addTest(OpTestPCI.OpTestPCISkiroot())
        self.s.addTest(OpTestDropbearSafety.OpTestDropbearSafety())
        self.s.addTest(OpTestFastReboot.OpTestFastReboot())
#        self.s.addTest(OpTestEnergyScale.runtime_suite())
    def suite(self):
        return self.s

class HostSuite():
    def __init__(self):
        self.s = unittest.TestSuite()
        self.s.addTest(OpTestPCI.OpTestPCIHost())
        self.s.addTest(OpTestFWTS.OpTestFWTS())
        self.s.addTest(OpTestRTCdriver.OpTestRTCdriver())
        self.s.addTest(OpTestEM.suite())
        self.s.addTest(OpTestAt24driver.OpTestAt24driver())
    def suite(self):
        return self.s

class ExperimentalSuite():
    def __init__(self):
        self.s = unittest.TestSuite()
        self.s.addTest(OpTestEEH.suite())
    def suite(self):
        return self.s

class BasicIPLSuite():
    def suite(self):
        return BasicIPL.suite()

class DefaultSuite():
    def __init__(self):
        self.s = unittest.TestSuite()
        self.s.addTest(SkirootSuite().suite())
        self.s.addTest(HostSuite().suite())
    def suite(self):
        return self.s

class OpTestEMSuite():
    def suite(self):
        return OpTestEM.suite()

class OpTestEEHSuite():
    def suite(self):
        return OpTestEEH.suite()

class HMISuite():
    def suite(self):
        return OpTestHMIHandling.suite()

class ExperimentalHMISuite():
    def suite(self):
        return OpTestHMIHandling.experimental_suite()

class UnrecoverableHMISuite():
    def suite(self):
        return OpTestHMIHandling.unrecoverable_suite()

class OpTestEnergyScaleSuite():
    def __init__(self):
        self.s = unittest.TestSuite()
        self.s.addTest(OpTestEnergyScale.standby_suite())
        self.s.addTest(OpTestEnergyScale.runtime_suite())
    def suite(self):
        return self.s

suites = {
    'skiroot' : SkirootSuite(),
    'host'    : HostSuite(),
    'default' : DefaultSuite(),
    'BasicIPL' : BasicIPLSuite(),
    'em' :       OpTestEMSuite(),
    'experimental': ExperimentalSuite(),
    'experimental-eeh': OpTestEEHSuite(),
    'experimental-energyscale' : OpTestEnergyScaleSuite(),
    'standby' : StandbySuite(),
    'hmi' : HMISuite(),
    'experimental-hmi' : ExperimentalHMISuite(),
    'experimental-unrecoverable-hmi' : UnrecoverableHMISuite(),
}

if OpTestConfiguration.conf.args.list_suites:
    print 'Test Suites'
    print '-----------'
    for key in suites:
        print key
    exit(0)

t = unittest.TestSuite()

if OpTestConfiguration.conf.args.run_suite:
    for suite in OpTestConfiguration.conf.args.run_suite:
        t.addTest(suites[suite].suite())

if OpTestConfiguration.conf.args.run:
    t.addTest(unittest.TestLoader().loadTestsFromNames(OpTestConfiguration.conf.args.run))

if not OpTestConfiguration.conf.args.run_suite and not OpTestConfiguration.conf.args.run:
    print "RUNNING DEFAULT SUITE"
    t.addTest(suites['default'].suite())


unittest.TextTestRunner(verbosity=2).run(t)

